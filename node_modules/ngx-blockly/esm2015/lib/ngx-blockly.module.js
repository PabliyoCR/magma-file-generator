import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';
import { NgxBlocklyComponent } from './ngx-blockly/ngx-blockly.component';
import * as Blockly from 'blockly/core';
import * as i0 from "@angular/core";
export class NgxBlocklyModule {
}
NgxBlocklyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.4", ngImport: i0, type: NgxBlocklyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxBlocklyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.4", ngImport: i0, type: NgxBlocklyModule, declarations: [NgxBlocklyComponent], exports: [NgxBlocklyComponent] });
NgxBlocklyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.4", ngImport: i0, type: NgxBlocklyModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.4", ngImport: i0, type: NgxBlocklyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgxBlocklyComponent],
                    imports: [],
                    exports: [NgxBlocklyComponent],
                    providers: [],
                    schemas: [NO_ERRORS_SCHEMA]
                }]
        }] });
Blockly.ToolboxCategory.prototype.parseContents_ = function (categoryDef) {
    const contents = categoryDef['contents'];
    if (categoryDef['custom']) {
        this.flyoutItems_ = categoryDef['custom'];
    }
    else if (contents) {
        for (let i = 0, itemDef; (itemDef = contents[i]); i++) {
            const flyoutItem = (itemDef);
            this.flyoutItems_.push(flyoutItem);
        }
    }
    if (categoryDef['categoryclass']) {
        this.cssConfig_.row += ' ' + categoryDef['categoryclass'];
    }
};
Blockly.CollapsibleToolboxCategory.prototype.parseContents_ = function (categoryDef) {
    const contents = categoryDef['contents'];
    let prevIsFlyoutItem = true;
    if (categoryDef['custom']) {
        this.flyoutItems_ = categoryDef['custom'];
    }
    else if (contents) {
        for (let i = 0, itemDef; (itemDef = contents[i]); i++) {
            // Separators can exist as either a flyout item or a toolbox item so
            // decide where it goes based on the type of the previous item.
            if (!Blockly.registry.hasItem(Blockly.registry.Type.TOOLBOX_ITEM, itemDef['kind']) ||
                (itemDef['kind'].toLowerCase() === Blockly.ToolboxSeparator.registrationName &&
                    prevIsFlyoutItem)) {
                const flyoutItem = (itemDef);
                this.flyoutItems_.push(flyoutItem);
                prevIsFlyoutItem = true;
            }
            else {
                this.createToolboxItem_(itemDef);
                prevIsFlyoutItem = false;
            }
        }
    }
    if (categoryDef['categoryclass']) {
        this.cssConfig_.row += ' ' + categoryDef['categoryclass'];
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJsb2NrbHkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWJsb2NrbHkvc3JjL2xpYi9uZ3gtYmxvY2tseS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMxRSxPQUFPLEtBQUssT0FBTyxNQUFNLGNBQWMsQ0FBQzs7QUFTeEMsTUFBTSxPQUFPLGdCQUFnQjs7NkdBQWhCLGdCQUFnQjs4R0FBaEIsZ0JBQWdCLGlCQU5WLG1CQUFtQixhQUV4QixtQkFBbUI7OEdBSXBCLGdCQUFnQixhQUhkLEVBQUUsWUFGSixFQUFFOzJGQUtGLGdCQUFnQjtrQkFQNUIsUUFBUTttQkFBQztvQkFDTixZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztvQkFDbkMsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0JBQzlCLFNBQVMsRUFBRSxFQUFFO29CQUNiLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO2lCQUM5Qjs7QUFJRCxPQUFPLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBVSxXQUFXO0lBQ3BFLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6QyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUM3QztTQUFNLElBQUksUUFBUSxFQUFFO1FBQ2pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuRCxNQUFNLFVBQVUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3RDO0tBQ0o7SUFDRCxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsRUFBRTtRQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQzdEO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsT0FBTyxDQUFDLDBCQUEwQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBVSxXQUFXO0lBQy9FLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6QyxJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQztJQUM1QixJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUM3QztTQUFNLElBQUksUUFBUSxFQUFFO1FBQ2pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuRCxvRUFBb0U7WUFDcEUsK0RBQStEO1lBQy9ELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM5RSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCO29CQUN4RSxnQkFBZ0IsQ0FBQyxFQUFFO2dCQUN2QixNQUFNLFVBQVUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDbkMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO2FBQzNCO2lCQUFNO2dCQUNILElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDakMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO2FBQzVCO1NBQ0o7S0FDSjtJQUNELElBQUksV0FBVyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDN0Q7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTk9fRVJST1JTX1NDSEVNQSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4QmxvY2tseUNvbXBvbmVudCB9IGZyb20gJy4vbmd4LWJsb2NrbHkvbmd4LWJsb2NrbHkuY29tcG9uZW50JztcbmltcG9ydCAqIGFzIEJsb2NrbHkgZnJvbSAnYmxvY2tseS9jb3JlJztcblxuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtOZ3hCbG9ja2x5Q29tcG9uZW50XSxcbiAgICBpbXBvcnRzOiBbXSxcbiAgICBleHBvcnRzOiBbTmd4QmxvY2tseUNvbXBvbmVudF0sXG4gICAgcHJvdmlkZXJzOiBbXSxcbiAgICBzY2hlbWFzOiBbTk9fRVJST1JTX1NDSEVNQV1cbn0pXG5leHBvcnQgY2xhc3MgTmd4QmxvY2tseU1vZHVsZSB7XG59XG5cbkJsb2NrbHkuVG9vbGJveENhdGVnb3J5LnByb3RvdHlwZS5wYXJzZUNvbnRlbnRzXyA9IGZ1bmN0aW9uIChjYXRlZ29yeURlZikge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gY2F0ZWdvcnlEZWZbJ2NvbnRlbnRzJ107XG4gICAgaWYgKGNhdGVnb3J5RGVmWydjdXN0b20nXSkge1xuICAgICAgICB0aGlzLmZseW91dEl0ZW1zXyA9IGNhdGVnb3J5RGVmWydjdXN0b20nXTtcbiAgICB9IGVsc2UgaWYgKGNvbnRlbnRzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpdGVtRGVmOyAoaXRlbURlZiA9IGNvbnRlbnRzW2ldKTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBmbHlvdXRJdGVtID0gKGl0ZW1EZWYpO1xuICAgICAgICAgICAgdGhpcy5mbHlvdXRJdGVtc18ucHVzaChmbHlvdXRJdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2F0ZWdvcnlEZWZbJ2NhdGVnb3J5Y2xhc3MnXSkge1xuICAgICAgICB0aGlzLmNzc0NvbmZpZ18ucm93ICs9ICcgJyArIGNhdGVnb3J5RGVmWydjYXRlZ29yeWNsYXNzJ107XG4gICAgfVxufTtcblxuQmxvY2tseS5Db2xsYXBzaWJsZVRvb2xib3hDYXRlZ29yeS5wcm90b3R5cGUucGFyc2VDb250ZW50c18gPSBmdW5jdGlvbiAoY2F0ZWdvcnlEZWYpIHtcbiAgICBjb25zdCBjb250ZW50cyA9IGNhdGVnb3J5RGVmWydjb250ZW50cyddO1xuICAgIGxldCBwcmV2SXNGbHlvdXRJdGVtID0gdHJ1ZTtcbiAgICBpZiAoY2F0ZWdvcnlEZWZbJ2N1c3RvbSddKSB7XG4gICAgICAgIHRoaXMuZmx5b3V0SXRlbXNfID0gY2F0ZWdvcnlEZWZbJ2N1c3RvbSddO1xuICAgIH0gZWxzZSBpZiAoY29udGVudHMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGl0ZW1EZWY7IChpdGVtRGVmID0gY29udGVudHNbaV0pOyBpKyspIHtcbiAgICAgICAgICAgIC8vIFNlcGFyYXRvcnMgY2FuIGV4aXN0IGFzIGVpdGhlciBhIGZseW91dCBpdGVtIG9yIGEgdG9vbGJveCBpdGVtIHNvXG4gICAgICAgICAgICAvLyBkZWNpZGUgd2hlcmUgaXQgZ29lcyBiYXNlZCBvbiB0aGUgdHlwZSBvZiB0aGUgcHJldmlvdXMgaXRlbS5cbiAgICAgICAgICAgIGlmICghQmxvY2tseS5yZWdpc3RyeS5oYXNJdGVtKEJsb2NrbHkucmVnaXN0cnkuVHlwZS5UT09MQk9YX0lURU0sIGl0ZW1EZWZbJ2tpbmQnXSkgfHxcbiAgICAgICAgICAgICAgICAoaXRlbURlZlsna2luZCddLnRvTG93ZXJDYXNlKCkgPT09IEJsb2NrbHkuVG9vbGJveFNlcGFyYXRvci5yZWdpc3RyYXRpb25OYW1lICYmXG4gICAgICAgICAgICAgICAgICAgIHByZXZJc0ZseW91dEl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmx5b3V0SXRlbSA9IChpdGVtRGVmKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZseW91dEl0ZW1zXy5wdXNoKGZseW91dEl0ZW0pO1xuICAgICAgICAgICAgICAgIHByZXZJc0ZseW91dEl0ZW0gPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVRvb2xib3hJdGVtXyhpdGVtRGVmKTtcbiAgICAgICAgICAgICAgICBwcmV2SXNGbHlvdXRJdGVtID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNhdGVnb3J5RGVmWydjYXRlZ29yeWNsYXNzJ10pIHtcbiAgICAgICAgdGhpcy5jc3NDb25maWdfLnJvdyArPSAnICcgKyBjYXRlZ29yeURlZlsnY2F0ZWdvcnljbGFzcyddO1xuICAgIH1cbn07XG5cbiJdfQ==