import { Block } from './block';
export class CustomBlock extends Block {
    constructor(type, blockMutator, ...args) {
        super(type);
        this._blockMutator = blockMutator ? blockMutator : null;
        this._args = args;
    }
    init(block) {
        this._block = block;
        this.defineBlock();
        this.block.setOnChange(function (event) {
            this.blockInstance.onChange(event);
        });
    }
    onChange(changeEvent) {
        // nothing to do
    }
    toXML() {
        return `<block type="${this.type}" disabled="${this.disabled}"></block>`;
    }
    toDartCode(block) {
        return 'Not implemented';
    }
    toJavaScriptCode(block) {
        return 'Not implemented';
    }
    toLuaCode(block) {
        return 'Not implemented';
    }
    toPHPCode(block) {
        return 'Not implemented';
    }
    toPythonCode(block) {
        return 'Not implemented';
    }
    get block() {
        return this._block;
    }
    set block(block) {
        this._block = block;
    }
    get blockMutator() {
        return this._blockMutator;
    }
    set blockMutator(mutator) {
        this._blockMutator = mutator;
    }
    get args() {
        return this._args;
    }
    set args(args) {
        this._args = args;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWJsb2NrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWJsb2NrbHkvc3JjL2xpYi9uZ3gtYmxvY2tseS9tb2RlbHMvY3VzdG9tLWJsb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHaEMsTUFBTSxPQUFnQixXQUFZLFNBQVEsS0FBSztJQU8zQyxZQUFZLElBQVksRUFBRSxZQUEyQixFQUFFLEdBQUcsSUFBVztRQUNqRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDeEQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFvQjtRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxLQUFLO1lBQ2xDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUlNLFFBQVEsQ0FBQyxXQUFvQztRQUNoRCxnQkFBZ0I7SUFDcEIsQ0FBQztJQUVNLEtBQUs7UUFDUixPQUFPLGdCQUFnQixJQUFJLENBQUMsSUFBSSxlQUFlLElBQUksQ0FBQyxRQUFRLFlBQVksQ0FBQztJQUM3RSxDQUFDO0lBRU0sVUFBVSxDQUFDLEtBQW9CO1FBQ2xDLE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEtBQW9CO1FBQ3hDLE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUVNLFNBQVMsQ0FBQyxLQUFvQjtRQUNqQyxPQUFPLGlCQUFpQixDQUFDO0lBQzdCLENBQUM7SUFFTSxTQUFTLENBQUMsS0FBb0I7UUFDakMsT0FBTyxpQkFBaUIsQ0FBQztJQUM3QixDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQW9CO1FBQ3BDLE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxLQUFLLENBQUMsS0FBcUI7UUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxZQUFZLENBQUMsT0FBcUI7UUFDbEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxJQUFJLENBQUMsSUFBVztRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbG9ja011dGF0b3IgfSBmcm9tICcuL2Jsb2NrLW11dGF0b3InO1xuaW1wb3J0IHsgQmxvY2sgfSBmcm9tICcuL2Jsb2NrJztcbmltcG9ydCAqIGFzIEJsb2NrbHkgZnJvbSAnYmxvY2tseS9jb3JlJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEN1c3RvbUJsb2NrIGV4dGVuZHMgQmxvY2sge1xuXG4gICAgcHJpdmF0ZSBfYmxvY2s6IEJsb2NrbHkuQmxvY2s7XG4gICAgcHJpdmF0ZSBfYmxvY2tNdXRhdG9yOiBCbG9ja011dGF0b3I7XG4gICAgcHJpdmF0ZSBfYXJnczogYW55W107XG5cblxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IHN0cmluZywgYmxvY2tNdXRhdG9yPzogQmxvY2tNdXRhdG9yLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICBzdXBlcih0eXBlKTtcbiAgICAgICAgdGhpcy5fYmxvY2tNdXRhdG9yID0gYmxvY2tNdXRhdG9yID8gYmxvY2tNdXRhdG9yIDogbnVsbDtcbiAgICAgICAgdGhpcy5fYXJncyA9IGFyZ3M7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQoYmxvY2s6IEJsb2NrbHkuQmxvY2spIHtcbiAgICAgICAgdGhpcy5fYmxvY2sgPSBibG9jaztcbiAgICAgICAgdGhpcy5kZWZpbmVCbG9jaygpO1xuICAgICAgICB0aGlzLmJsb2NrLnNldE9uQ2hhbmdlKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdGhpcy5ibG9ja0luc3RhbmNlLm9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IGRlZmluZUJsb2NrKCk7XG5cbiAgICBwdWJsaWMgb25DaGFuZ2UoY2hhbmdlRXZlbnQ6IEJsb2NrbHkuRXZlbnRzLkFic3RyYWN0KSB7XG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICB9XG5cbiAgICBwdWJsaWMgdG9YTUwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGA8YmxvY2sgdHlwZT1cIiR7dGhpcy50eXBlfVwiIGRpc2FibGVkPVwiJHt0aGlzLmRpc2FibGVkfVwiPjwvYmxvY2s+YDtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9EYXJ0Q29kZShibG9jazogQmxvY2tseS5CbG9jayk6IHN0cmluZyB8IGFueVtdIHtcbiAgICAgICAgcmV0dXJuICdOb3QgaW1wbGVtZW50ZWQnO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b0phdmFTY3JpcHRDb2RlKGJsb2NrOiBCbG9ja2x5LkJsb2NrKTogc3RyaW5nIHwgYW55W10ge1xuICAgICAgICByZXR1cm4gJ05vdCBpbXBsZW1lbnRlZCc7XG4gICAgfVxuXG4gICAgcHVibGljIHRvTHVhQ29kZShibG9jazogQmxvY2tseS5CbG9jayk6IHN0cmluZyB8IGFueVtdIHtcbiAgICAgICAgcmV0dXJuICdOb3QgaW1wbGVtZW50ZWQnO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1BIUENvZGUoYmxvY2s6IEJsb2NrbHkuQmxvY2spOiBzdHJpbmcgfCBhbnlbXSB7XG4gICAgICAgIHJldHVybiAnTm90IGltcGxlbWVudGVkJztcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9QeXRob25Db2RlKGJsb2NrOiBCbG9ja2x5LkJsb2NrKTogc3RyaW5nIHwgYW55W10ge1xuICAgICAgICByZXR1cm4gJ05vdCBpbXBsZW1lbnRlZCc7XG4gICAgfVxuXG4gICAgZ2V0IGJsb2NrKCk6ICBCbG9ja2x5LkJsb2NrIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrO1xuICAgIH1cblxuICAgIHNldCBibG9jayhibG9jazogIEJsb2NrbHkuQmxvY2spIHtcbiAgICAgICAgdGhpcy5fYmxvY2sgPSBibG9jaztcbiAgICB9XG5cbiAgICBnZXQgYmxvY2tNdXRhdG9yKCk6IEJsb2NrTXV0YXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ibG9ja011dGF0b3I7XG4gICAgfVxuXG4gICAgc2V0IGJsb2NrTXV0YXRvcihtdXRhdG9yOiBCbG9ja011dGF0b3IpIHtcbiAgICAgICAgdGhpcy5fYmxvY2tNdXRhdG9yID0gbXV0YXRvcjtcbiAgICB9XG5cbiAgICBnZXQgYXJncygpOiBhbnlbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcmdzO1xuICAgIH1cblxuICAgIHNldCBhcmdzKGFyZ3M6IGFueVtdKSB7XG4gICAgICAgIHRoaXMuX2FyZ3MgPSBhcmdzO1xuICAgIH1cbn1cbiJdfQ==